{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport params from \"./src/params\";\nimport { createdBoardMined, cloneBoard, openField, hadExplosion, wonGame, showMines, toggleFlag, flagsUsed } from \"./src/functions\";\nimport MineField from \"./src/components/MineField\";\nimport Header from \"./src/components/Header\";\nimport LevelSelection from \"./src/screens/LevelSelection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n\n    _this.minesAmount = function () {\n      var rows = params.getRowsAmount();\n      var columns = params.getColumnsAmount();\n      return Math.ceil(rows * columns * params.difficultLevel);\n    };\n\n    _this.createState = function () {\n      var rows = params.getRowsAmount();\n      var columns = params.getColumnsAmount();\n      return {\n        board: createdBoardMined(rows, columns, _this.minesAmount()),\n        won: false,\n        lost: false,\n        showLevelSelect: false\n      };\n    };\n\n    _this.onOpenField = function (row, column) {\n      var board = _this.state.board;\n      var clonedBoard = cloneBoard(board);\n      openField(clonedBoard, row, column);\n      var lost = hadExplosion(clonedBoard);\n      var won = wonGame(clonedBoard);\n\n      if (lost) {\n        showMines(clonedBoard);\n        Alert.alert('Perdeu!');\n      }\n\n      if (won) {\n        Alert.alert('Ganhou!');\n      }\n\n      _this.setState({\n        board: clonedBoard,\n        lost: lost,\n        won: won\n      });\n    };\n\n    _this.onSelectedField = function (row, column) {\n      var board = _this.state.board;\n      var clonedBoard = cloneBoard(board);\n      toggleFlag(clonedBoard, row, column);\n      var won = wonGame(clonedBoard);\n\n      if (won) {\n        Alert.alert('Ganhou!');\n      }\n\n      _this.setState({\n        board: clonedBoard,\n        won: won\n      });\n    };\n\n    _this.levelSelected = function (difficult) {\n      params.difficultLevel = difficult;\n\n      _this.setState(_this.createState());\n    };\n\n    _this.toggleDifficultModal = function () {\n      _this.setState(function (prevState) {\n        return {\n          showLevelSelect: !prevState.showLevelSelect\n        };\n      });\n    };\n\n    _this.state = _this.createState();\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          board = _this$state.board,\n          showLevelSelect = _this$state.showLevelSelect;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Header, {\n          flagsLeft: this.minesAmount() - flagsUsed(board),\n          onNewGame: function onNewGame() {\n            return _this2.setState(_this2.createState());\n          },\n          onFlagPress: this.toggleDifficultModal\n        }), _jsx(View, {\n          style: styles.board,\n          children: _jsx(MineField, {\n            board: board,\n            onOpenField: this.onOpenField,\n            onSelectedField: this.onSelectedField\n          })\n        }), _jsx(LevelSelection, {\n          isVisible: showLevelSelect,\n          levelSelected: this.levelSelected,\n          onCancel: this.toggleDifficultModal\n        })]\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  board: {\n    alignItems: 'center',\n    backgroundColor: '#AAA'\n  }\n});","map":{"version":3,"sources":["/home/andre/Documentos/Udemy Course/mines/Mine/App.js"],"names":["React","Component","params","createdBoardMined","cloneBoard","openField","hadExplosion","wonGame","showMines","toggleFlag","flagsUsed","MineField","Header","LevelSelection","App","minesAmount","rows","getRowsAmount","columns","getColumnsAmount","Math","ceil","difficultLevel","createState","board","won","lost","showLevelSelect","onOpenField","row","column","state","clonedBoard","Alert","alert","setState","onSelectedField","levelSelected","difficult","toggleDifficultModal","prevState","styles","container","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, Text, View, Alert } from 'react-native';\nimport params from './src/params';\nimport {\n  createdBoardMined,\n  cloneBoard,\n  openField,\n  hadExplosion,\n  wonGame,\n  showMines,\n  toggleFlag,\n  flagsUsed\n} from './src/functions';\nimport MineField from './src/components/MineField';\nimport Header from './src/components/Header';\nimport LevelSelection from './src/screens/LevelSelection';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.state = this.createState()\n  }\n\n  minesAmount = () => {\n    const rows = params.getRowsAmount();\n    const columns = params.getColumnsAmount();\n\n    return Math.ceil( rows * columns * params.difficultLevel );\n  }\n\n  createState = () => {\n    const rows = params.getRowsAmount();\n    const columns = params.getColumnsAmount();\n\n    return {\n      board: createdBoardMined(rows, columns, this.minesAmount()),\n      won: false,\n      lost: false,\n      showLevelSelect: false,\n    };\n  }\n\n  onOpenField = (row, column) => {\n    const { board } = this.state;\n    const clonedBoard = cloneBoard(board);\n\n    openField(clonedBoard, row, column);\n\n    const lost = hadExplosion(clonedBoard);\n    const won = wonGame(clonedBoard);\n\n    if (lost) {\n      showMines(clonedBoard);\n      Alert.alert('Perdeu!');\n    }\n\n    if (won) {\n      Alert.alert('Ganhou!')\n    }\n\n    this.setState({\n      board: clonedBoard,\n      lost,\n      won,\n    });\n  }\n\n  onSelectedField = (row, column) => {\n    const { board } = this.state;\n    const clonedBoard = cloneBoard(board);\n\n    toggleFlag(clonedBoard, row, column);\n    \n    const won = wonGame(clonedBoard);\n\n    if (won) {\n      Alert.alert('Ganhou!')\n    }\n\n    this.setState({\n      board: clonedBoard,\n      won,\n    });\n  }\n\n  levelSelected = (difficult) => {\n    params.difficultLevel = difficult;\n    this.setState(this.createState());\n  }\n\n  toggleDifficultModal = () => {\n    this.setState((prevState) => ({\n      showLevelSelect: !prevState.showLevelSelect,\n    }));\n  }\n  \n  render() {\n  \n    const { board, showLevelSelect } = this.state;\n  \n    return (\n      <View style={ styles.container }>\n        <Header\n          flagsLeft={ this.minesAmount() - flagsUsed(board) }\n          onNewGame={ () => this.setState(this.createState()) }\n          onFlagPress={ this.toggleDifficultModal }\n        />\n        <View style={styles.board}>\n          <MineField\n            board={ board }\n            onOpenField={ this.onOpenField }\n            onSelectedField={ this.onSelectedField }\n          />\n        </View>\n        <LevelSelection\n          isVisible={ showLevelSelect }\n          levelSelected={ this.levelSelected }\n          onCancel={ this.toggleDifficultModal }\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  board: {\n    alignItems: 'center',\n    backgroundColor: '#AAA'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}